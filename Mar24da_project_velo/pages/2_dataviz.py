import streamlit as st
from streamlit_folium import st_folium
import utils.velo_data_viz as viz
import utils.str_func as common

common.page_config("Donn√©es")
common.local_css("css_str.css")
common.menu()


if 'df_velo' not in st.session_state:
    common.load_velo()

df_velo = st.session_state.df_velo

st.html("<h1>Data Visualisation</h1>")

types = ['Comptages par temporalit√©', 'Classification des compteurs', 'M√©t√©o']
type_graph = st.selectbox('',types)

#temporalit√©
if(type_graph==types[0]):
    temp = st.radio("Temporalit√©", options=['mois','semaine','jour et heure'], horizontal=True, label_visibility='hidden')
    st.write("")
    
    if(temp=="mois"):
        col1, col2 = st.columns((1, 1))
        with col1:
            st.markdown("#### **Mois**")
            st.markdown("Le graphique repr√©sente le nombre moyen de passages de v√©los par mois au cours des ann√©es 2022 et 2023. Une nette augmentation du nombre moyen de passages de v√©los est observ√©e au mois de juin, co√Øncidant avec l'arriv√©e des temp√©ratures estivales. Cette p√©riode voit une augmentation significative de l'utilisation des v√©los.")
            st.markdown("En revanche, une baisse marqu√©e est constat√©e en juillet et en ao√ªt. Ces mois correspondent √† la p√©riode estivale o√π de nombreuses personnes partent en vacances, r√©duisant ainsi l'utilisation des v√©los.")
            st.markdown("√Ä partir du mois de septembre, on observe une remont√©e des courbes, suivie d'une nouvelle baisse √† partir de novembre, avec le d√©but de la baisse des temp√©ratures.")
            st.markdown("Cette tendance sugg√®re une corr√©lation entre l'utilisation des v√©los et les conditions m√©t√©orologiques et les vacances estivales.")
        col2.plotly_chart(viz.get_compt_temp(df_velo, temp))
    elif(temp=="semaine"):
        col1, col2 = st.columns((1, 1))
        with col1:
            st.markdown("#### **Semaine**")
            st.markdown("Ce graphique repr√©sente la fr√©quentation moyenne hebdomadaire des cyclistes √† Paris au cours des ann√©es 2022 et 2023, en mettant en √©vidence les p√©riodes creuses ainsi que les vacances scolaires.")
            st.markdown("Des fluctuations dans la fr√©quentation cycliste sont observ√©es, avec des variations significatives pendant les vacances scolaires, indiqu√©es par les zones grises, sugg√©rant une r√©duction des d√©placements domicile-√©cole ou domicile-travail, et donc une baisse de l'utilisation du v√©lo pendant ces p√©riodes.")
            st.markdown("Notamment, une forte baisse de la fr√©quentation est observ√©e pendant les vacances de No√´l, probablement en raison des conditions m√©t√©orologiques d√©favorables du d√©but de l‚Äôhiver.")
        col2.plotly_chart(viz.get_compt_temp(df_velo, temp))
    else:
        st.markdown("#### **Jour et heure**")
        col1_1, col2_1 = st.columns((1, 1))
        col1_1.plotly_chart(viz.get_compt_temp(df_velo, "jour"))
        col1_1.markdown("Concernant maintenant la fr√©quence par jour dans la semaine, nous observons une plus grande fr√©quence sur les jours ouvr√©s (du lundi au vendredi), avec une plus faible fr√©quence durant les weekends")
        col2_1.plotly_chart(viz.get_compt_temp(df_velo, "heure")) 
        col2_1.markdown("Concernant la fr√©quence par heure, nous observons une forte affluence aux heures de pointes, c‚Äôest √† dire entre 8h et 9h ainsi qu‚Äôentre 17h et 19h. L‚Äôaffluence baisse √©galement drastiquement pendant la nuit, entre minuit et 5h du matin")
        st.markdown("")
        st.markdown("#### **R√©sum√©**")
        col1_2, col2_2 = st.columns((1, 1))
        col1_2.plotly_chart(viz.get_compt_temp(df_velo, "jour et heure"))
        col2_2.markdown("**Le graphique ci-pr√©sent qui regroupe les deux visualisations pr√©c√©dentes confirme la tendance observ√©e : nous comprenons que l‚Äôusage du v√©lo se fait principalement pour le trajet domicile / lieu de travail, il est donc un moyen de transport quotidien √† part enti√®re.**")
        
#compteurs
elif(type_graph==types[1]):
    m,top,flop = viz.get_map_compt(df_velo)
    top = top[["Nom du compteur", "Comptage horaire"]]
    flop = flop.sort_values(by="Comptage horaire")[["Nom du compteur", "Comptage horaire"]]

    colmap1, colmap2 = st.columns((2, 3))
    with colmap1:
        st.markdown("#### **Classement par comptage horaire moyen**")
        st.markdown("")
        st.markdown("")
        st.markdown("##### **üî∫ Top 5**")
        st.dataframe(top, hide_index=True, use_container_width=True)
        st.markdown("##### **üîª Flop 5**")
        st.dataframe(flop, hide_index=True, use_container_width=True)
    
    with colmap2:
        st_folium(m, width=836, height=700)
    
    st.markdown("")
    st.markdown("La carte ci-dessus nous permet de visualiser les emplacements des compteurs, pond√©r√©s par leur moyenne de comptage horaire.")
    st.markdown("Les compteurs top 5 sont pr√©cis√©s par les marqueurs :red[rouges] ‚ûï, les compteurs flop 5 par les marqueurs :green[verts] ‚ûñ.")
    st.markdown("On constate que les compteurs comptabilisant le comptage horaire moyen le plus √©lev√© sont principalement situ√©s dans le **centre** (**1er, 2√®me, 3√®me et 4√®me arrondissements**) et le **centre-nord** de Paris (√† cheval entre le **9√®me et 10√®me arrondissement**). Il y a √©galement un trafic √©lev√© entre le pont des invalides et pont de la concorde √† l‚Äôouest, ainsi que dans le 11√®me arrondissement √† l‚Äôest.")
    st.markdown("Le flop 5 se situe surtout dans le **17√®me et 18√®me arrondissement**.")

#meteo
else:
    st.write("#### **M√©t√©o - pluie et temp√©ratures**")
    col1_1, col2_1 = st.columns((1, 1))
    col1_1.plotly_chart(viz.get_meteo(df_velo, "pluie"))
    col1_1.markdown("Nous pouvons constater que le comptage horaire moyen est plus √©lev√© s‚Äôil ne pleut pas.")
    col1_1.markdown("Cependant ce graphique peut-√™tre biais√© par le d√©s√©quilibre des classes : la grande majorit√© des heures sont consid√©r√©es comme non pluvieuses et sont donc sujettes √† un pourcentage plus √©lev√© de comptage √† 0 que la cat√©gorie Pluie intense.")
    col2_1.plotly_chart(viz.get_meteo(df_velo, "temperatures"))
    col2_1.markdown("Ce graphique nous permet de visualiser la relation entre les temp√©ratures et les comptages : les comptages augmentent l√©g√®rement avec la temp√©ratures et une intensit√© de pluie r√©duite.")
    col2_1.markdown("Ce r√©sultat est confirm√© par l'analyse de la r√©gression lin√©aire entre le comptage horaire et les temp√©ratures avec un coefficient de 2.529.")